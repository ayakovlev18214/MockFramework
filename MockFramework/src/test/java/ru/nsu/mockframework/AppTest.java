/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.mockframework;

import org.junit.Test;
import ru.nsu.app.TestClass;

import static org.junit.Assert.*;

public class AppTest {

    @Mock
    private TestClass mock;

    @Test public void testMockAnnotation() {
        JMock.initMocks(this);
        assertEquals(null, mock.getIntAndReturnStrOfGivenInt(5));

        JMock.when(mock.getIntAndReturnStrOfGivenInt(JMock.anyNumerical())).thenReturn("You put smth");
        JMock.when(mock.getIntAndReturnStrOfGivenInt(JMock.eq(10))).thenReturn("You put 10");

        assertEquals("You put 10", mock.getIntAndReturnStrOfGivenInt(10));
        assertEquals("You put smth", mock.getIntAndReturnStrOfGivenInt(555));
    }

    @Test public void testNonStatic() {
        TestClass test = new TestClass();
        assertEquals("1 \0", test.getTwoPrimitiveArgsAndReturnStrOfThem(1, '\0'));

        test = JMock.mock(TestClass.class);
        assertNull(test.getTwoPrimitiveArgsAndReturnStrOfThem(1, '\0'));

        JMock.when(
          test.getTwoPrimitiveArgsAndReturnStrOfThem(JMock.anyNumerical(), JMock.anyChar())
        ).thenReturn("OKAY");
        assertEquals("OKAY", test.getTwoPrimitiveArgsAndReturnStrOfThem(1, '\0'));

        JMock.when(test.getString()).thenReturn("OKAY2");
        assertEquals("OKAY2", test.getString());

        JMock.when(test.getChar()).thenReturn('b');
        assertEquals('b', test.getChar());
        assertEquals("OKAY2", test.getString());
        assertEquals("OKAY", test.getTwoPrimitiveArgsAndReturnStrOfThem(1, '\0'));

        JMock.when(test.getInt()).thenReturn(1);
        assertEquals(1, test.getInt());

        JMock.when(test.getIntArr()).thenReturn(new int[] {5,6,6});
        assertArrayEquals(new int[] {5,6,6}, test.getIntArr());

        JMock.when(test.getTwoPrimitiveArgsAndReturnStrOfThem(JMock.eq(1), JMock.eq('A'))).thenReturn("OnlyIf1AndA");
        assertEquals("OnlyIf1AndA", test.getTwoPrimitiveArgsAndReturnStrOfThem(1, 'A'));
        assertEquals("OKAY", test.getTwoPrimitiveArgsAndReturnStrOfThem(0, '\0'));
        assertEquals("OKAY", test.getTwoPrimitiveArgsAndReturnStrOfThem(1, '\n'));
    }

    @Test public void testStatic() {
        assertEquals("TEST STATIC", TestClass.staticReturnStr());
        try(StaticMock mock = JMock.makeStaticMock(TestClass.class)) {
            assertNull(TestClass.staticReturnStr());

            JMock.when(TestClass.staticReturnStr()).thenReturn("TEST MOCK");
            assertEquals("TEST MOCK", TestClass.staticReturnStr());

            JMock.when(TestClass.staticGetIntAndReturnStr(JMock.anyNumerical()))
              .thenReturn("Any int");
            assertEquals("Any int", TestClass.staticGetIntAndReturnStr(5));

            JMock.when(TestClass.staticGetIntAndReturnStr(JMock.eq(25)))
              .thenReturn("Oh, 54");
            assertEquals("Oh, 54", TestClass.staticGetIntAndReturnStr(25));
            assertEquals("Any int", TestClass.staticGetIntAndReturnStr(225));

        }
        assertEquals("TEST STATIC", TestClass.staticReturnStr());
    }
}
